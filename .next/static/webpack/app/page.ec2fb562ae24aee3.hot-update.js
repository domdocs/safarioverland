"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./lib/listings.ts":
/*!*************************!*\
  !*** ./lib/listings.ts ***!
  \*************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getCategories: () => (/* binding */ getCategories),\n/* harmony export */   getCategoriesSync: () => (/* binding */ getCategoriesSync),\n/* harmony export */   getFeaturedListings: () => (/* binding */ getFeaturedListings),\n/* harmony export */   getFeaturedListingsSync: () => (/* binding */ getFeaturedListingsSync),\n/* harmony export */   getListingById: () => (/* binding */ getListingById),\n/* harmony export */   getListingByIdSync: () => (/* binding */ getListingByIdSync),\n/* harmony export */   getListingCount: () => (/* binding */ getListingCount),\n/* harmony export */   getListings: () => (/* binding */ getListings),\n/* harmony export */   getListingsByCategory: () => (/* binding */ getListingsByCategory),\n/* harmony export */   getListingsByCategorySync: () => (/* binding */ getListingsByCategorySync),\n/* harmony export */   getListingsByRegion: () => (/* binding */ getListingsByRegion),\n/* harmony export */   getListingsSync: () => (/* binding */ getListingsSync),\n/* harmony export */   getPendingListings: () => (/* binding */ getPendingListings),\n/* harmony export */   getRegions: () => (/* binding */ getRegions),\n/* harmony export */   updateListing: () => (/* binding */ updateListing),\n/* harmony export */   updateListingInMemory: () => (/* binding */ updateListingInMemory)\n/* harmony export */ });\n/* harmony import */ var _supabase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./supabase */ \"(app-pages-browser)/./lib/supabase.ts\");\n\n// Mock data that will be used as fallback if Supabase is unavailable\nconst mockListings = [\n    {\n        id: \"1\",\n        listing_name: \"Serengeti Safari Lodge\",\n        category: \"lodges\",\n        region: \"East Africa\",\n        country: \"Tanzania\",\n        location: \"Serengeti National Park\",\n        description: \"Experience the ultimate luxury safari lodge in the heart of the Serengeti. Our eco-friendly lodge offers panoramic views of the plains, gourmet dining, and guided safari tours with expert naturalists.\",\n        contact_name: \"Sarah Johnson\",\n        contact_email: \"bookings@serengetiluxurylodge.com\",\n        contact_phone: \"+255 742 123456\",\n        website: \"https://www.serengetiluxurylodge.com\",\n        price_info: \"From $450 per person per night, all-inclusive\",\n        featured: true,\n        image_url: \"/placeholder.svg?height=300&width=400\",\n        status: \"approved\",\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n    },\n    {\n        id: \"2\",\n        listing_name: \"Mara River Campsite\",\n        category: \"campsites\",\n        region: \"East Africa\",\n        country: \"Kenya\",\n        location: \"Maasai Mara National Reserve\",\n        description: \"Our campsite is located on the banks of the famous Mara River, offering an authentic camping experience in the wild. Perfect for witnessing the Great Migration crossing.\",\n        contact_name: \"James Omondi\",\n        contact_email: \"info@mararivercamps.co.ke\",\n        contact_phone: \"+254 722 987654\",\n        website: \"https://www.mararivercamps.co.ke\",\n        price_info: \"$25 per person per night, tents available for rent at $15 per night\",\n        featured: false,\n        image_url: \"/placeholder.svg?height=300&width=400\",\n        status: \"approved\",\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n    },\n    {\n        id: \"3\",\n        listing_name: \"Safari Wheels 4x4 Rentals\",\n        category: \"4x4-rentals\",\n        region: \"Southern Africa\",\n        country: \"South Africa\",\n        location: \"Johannesburg\",\n        description: \"Fully equipped 4x4 vehicles for your self-drive safari adventure. Our fleet includes Toyota Land Cruisers and Ford Rangers with roof tents, camping gear, GPS, and satellite phones.\",\n        contact_name: \"David Nkosi\",\n        contact_email: \"rentals@safariwheels.co.za\",\n        contact_phone: \"+27 83 456 7890\",\n        website: \"https://www.safariwheels.co.za\",\n        price_info: \"From $85 per day, weekly discounts available\",\n        featured: true,\n        image_url: \"/placeholder.svg?height=300&width=400\",\n        status: \"approved\",\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n    },\n    {\n        id: \"4\",\n        listing_name: \"Authentic Africa Safaris\",\n        category: \"guided-tours\",\n        region: \"East Africa\",\n        country: \"Tanzania\",\n        location: \"Arusha\",\n        description: \"Small group guided safaris with expert local guides. We specialize in authentic wildlife experiences in Tanzania's northern circuit including Serengeti, Ngorongoro, and Tarangire.\",\n        contact_name: \"Grace Mollel\",\n        contact_email: \"tours@authenticafricasafaris.com\",\n        contact_phone: \"+255 765 432109\",\n        website: \"https://www.authenticafricasafaris.com\",\n        price_info: \"5-day safari from $1,800 per person, all-inclusive\",\n        featured: true,\n        image_url: \"/placeholder.svg?height=300&width=400\",\n        status: \"approved\",\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n    },\n    {\n        id: \"5\",\n        listing_name: \"Victoria Falls Adventure Center\",\n        category: \"adventure-activities\",\n        region: \"Southern Africa\",\n        country: \"Zimbabwe\",\n        location: \"Victoria Falls\",\n        description: \"Your one-stop adventure hub at Victoria Falls. We offer white water rafting, bungee jumping, helicopter flights, zip-lining, and gorge swinging with certified guides.\",\n        contact_name: \"Lisa Moyo\",\n        contact_email: \"adventures@vicfallsadventure.com\",\n        contact_phone: \"+263 83 123 4567\",\n        website: \"https://www.vicfallsadventure.com\",\n        price_info: \"Activities from $50, combo packages available\",\n        featured: true,\n        image_url: \"/placeholder.svg?height=300&width=400\",\n        status: \"approved\",\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n    },\n    {\n        id: \"6\",\n        listing_name: \"Kruger Wildlife Safaris\",\n        category: \"game-viewing\",\n        region: \"Southern Africa\",\n        country: \"South Africa\",\n        location: \"Kruger National Park\",\n        description: \"Specialized game viewing safaris in Kruger National Park. Our expert guides have decades of experience tracking the Big Five.\",\n        contact_name: \"Peter van Wyk\",\n        contact_email: \"bookings@krugerwildlifesafaris.co.za\",\n        contact_phone: \"+27 72 345 6789\",\n        website: \"https://www.krugerwildlifesafaris.co.za\",\n        price_info: \"Half-day drives from $75, full-day $140\",\n        featured: true,\n        image_url: \"/placeholder.svg?height=300&width=400\",\n        status: \"approved\",\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n    }\n];\n// Mock pending listings\nconst mockPendingListings = [\n    {\n        id: \"11\",\n        listing_name: \"Desert Safari Expeditions\",\n        category: \"guided-tours\",\n        region: \"North Africa\",\n        country: \"Morocco\",\n        location: \"Merzouga\",\n        description: \"Authentic Sahara Desert experiences with local Berber guides. Camel treks, 4x4 excursions, and overnight camps under the stars.\",\n        contact_name: \"Ibrahim Amazigh\",\n        contact_email: \"sahara@desertsafariexpeditions.com\",\n        contact_phone: \"+212 678 901234\",\n        website: \"https://www.desertsafariexpeditions.com\",\n        price_info: \"Day trips from $60, 3-day desert expedition $250\",\n        featured: false,\n        image_url: \"/placeholder.svg?height=300&width=400\",\n        status: \"pending\",\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n    },\n    {\n        id: \"12\",\n        listing_name: \"Zambezi River Lodge\",\n        category: \"lodges\",\n        region: \"Southern Africa\",\n        country: \"Zimbabwe\",\n        location: \"Zambezi National Park\",\n        description: \"Luxury lodge on the banks of the mighty Zambezi River, just upstream from Victoria Falls. 12 private chalets with river views.\",\n        contact_name: \"Tendai Moyo\",\n        contact_email: \"reservations@zambeziriverlodge.com\",\n        contact_phone: \"+263 712 345678\",\n        website: \"https://www.zambeziriverlodge.com\",\n        price_info: \"From $320 per person sharing, includes meals and select activities\",\n        featured: true,\n        image_url: \"/placeholder.svg?height=300&width=400\",\n        status: \"pending\",\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n    }\n];\n// Filter mock listings based on criteria (used as fallback)\nfunction filterMockListings() {\n    let { category, region, country, featured, status = \"approved\", limit = 50, offset = 0 } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n    // Choose the right dataset based on status\n    const dataset = status === \"pending\" ? mockPendingListings : mockListings;\n    // Apply filters\n    let filtered = [\n        ...dataset\n    ];\n    if (status && status !== \"all\") {\n        filtered = filtered.filter((listing)=>listing.status === status);\n    }\n    if (category) {\n        filtered = filtered.filter((listing)=>listing.category === category);\n    }\n    if (region) {\n        filtered = filtered.filter((listing)=>listing.region === region);\n    }\n    if (country) {\n        filtered = filtered.filter((listing)=>listing.country === country);\n    }\n    if (featured !== undefined) {\n        filtered = filtered.filter((listing)=>listing.featured === featured);\n    }\n    // Sort by created_at (newest first)\n    filtered.sort((a, b)=>new Date(b.created_at).getTime() - new Date(a.created_at).getTime());\n    // Apply pagination\n    return filtered.slice(offset, offset + limit);\n}\n// Get listings with various filters - synchronous version for client components\nfunction getListingsSync() {\n    let { category, region, country, featured, status = \"approved\", limit = 50, offset = 0 } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n    return filterMockListings({\n        category,\n        region,\n        country,\n        featured,\n        status,\n        limit,\n        offset\n    });\n}\n// Get listings with various filters\nasync function getListings() {\n    let { category, region, country, featured, status = \"approved\", limit = 100, offset = 0 } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n    try {\n        // First, get the mock data as a fallback\n        const mockData = filterMockListings({\n            category,\n            region,\n            country,\n            featured,\n            status,\n            limit,\n            offset\n        });\n        // Try to get the Supabase client\n        const supabase = (0,_supabase__WEBPACK_IMPORTED_MODULE_0__.getSupabaseServerClient)();\n        if (!supabase) {\n            console.warn(\"Supabase client not available, using mock data\");\n            return mockData;\n        }\n        try {\n            // Start building the query\n            let query = supabase.from(\"directory_listings\").select(\"*\");\n            // Apply filters\n            if (status && status !== \"all\") {\n                query = query.eq(\"status\", status);\n            }\n            if (category) {\n                query = query.eq(\"category\", category);\n            }\n            if (region) {\n                query = query.eq(\"region\", region);\n            }\n            if (country) {\n                query = query.eq(\"country\", country);\n            }\n            if (featured !== undefined) {\n                query = query.eq(\"featured\", featured);\n            }\n            // Apply pagination with higher limit\n            query = query.order(\"created_at\", {\n                ascending: false\n            }).range(offset, offset + limit - 1);\n            // Execute the query with a timeout\n            const { data, error } = await query;\n            if (error) {\n                console.error(\"Error fetching listings from Supabase:\", error);\n                return mockData;\n            }\n            if (!data || data.length === 0) {\n                console.log(\"No data returned from Supabase, using mock data\");\n                return mockData;\n            }\n            console.log(\"Successfully fetched \".concat(data.length, \" listings from Supabase\"));\n            // Map the data to match our DirectoryListing type\n            return data.map((item)=>({\n                    id: item.id || String(item.id),\n                    listing_name: item.listing_name || \"\",\n                    category: item.category || \"\",\n                    region: item.region || \"\",\n                    country: item.country || \"\",\n                    location: item.location || \"\",\n                    description: item.description || \"\",\n                    contact_name: item.contact_name || \"\",\n                    contact_email: item.contact_email || \"\",\n                    contact_phone: item.contact_phone || \"\",\n                    website: item.website || null,\n                    price_info: item.price_info || \"\",\n                    featured: Boolean(item.featured),\n                    image_url: item.image_url || null,\n                    status: item.status || \"approved\",\n                    created_at: item.created_at || new Date().toISOString(),\n                    updated_at: item.updated_at || new Date().toISOString()\n                }));\n        } catch (queryError) {\n            console.error(\"Error executing Supabase query:\", queryError);\n            return mockData;\n        }\n    } catch (error) {\n        console.error(\"Error in getListings:\", error);\n        return filterMockListings({\n            category,\n            region,\n            country,\n            featured,\n            status,\n            limit,\n            offset\n        });\n    }\n}\n// Get featured listings\nasync function getFeaturedListings() {\n    let limit = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 6;\n    try {\n        // Always return mock data first to ensure the page renders quickly\n        const mockData = filterMockListings({\n            featured: true,\n            limit\n        });\n        // Then try to get real data from Supabase\n        const supabase = (0,_supabase__WEBPACK_IMPORTED_MODULE_0__.getSupabaseServerClient)();\n        if (!supabase) {\n            return mockData;\n        }\n        try {\n            const { data, error } = await supabase.from(\"directory_listings\").select(\"*\").eq(\"featured\", true).eq(\"status\", \"approved\").order(\"created_at\", {\n                ascending: false\n            }).limit(limit);\n            if (error || !data || data.length === 0) {\n                return mockData;\n            }\n            return data.map((item)=>({\n                    id: item.id || String(item.id),\n                    listing_name: item.listing_name || \"\",\n                    category: item.category || \"\",\n                    region: item.region || \"\",\n                    country: item.country || \"\",\n                    location: item.location || \"\",\n                    description: item.description || \"\",\n                    contact_name: item.contact_name || \"\",\n                    contact_email: item.contact_email || \"\",\n                    contact_phone: item.contact_phone || \"\",\n                    website: item.website || null,\n                    price_info: item.price_info || \"\",\n                    featured: Boolean(item.featured),\n                    image_url: item.image_url || null,\n                    status: item.status || \"approved\",\n                    created_at: item.created_at || new Date().toISOString(),\n                    updated_at: item.updated_at || new Date().toISOString()\n                }));\n        } catch (error) {\n            console.error(\"Error in getFeaturedListings:\", error);\n            return mockData;\n        }\n    } catch (error) {\n        console.error(\"Error in getFeaturedListings:\", error);\n        return filterMockListings({\n            featured: true,\n            limit\n        });\n    }\n}\n// Get listings by category\nasync function getListingsByCategory(category) {\n    let limit = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 100;\n    try {\n        console.log(\"Fetching listings for category: \".concat(category, \" with limit: \").concat(limit));\n        // Try to get the Supabase client\n        const supabase = (0,_supabase__WEBPACK_IMPORTED_MODULE_0__.getSupabaseServerClient)();\n        if (!supabase) {\n            console.warn(\"Supabase client not available, using mock data for category\");\n            return getListingsByCategorySync(category, limit);\n        }\n        try {\n            // Execute the query with a higher limit\n            const { data, error } = await supabase.from(\"directory_listings\").select(\"*\").eq(\"category\", category).eq(\"status\", \"approved\").order(\"created_at\", {\n                ascending: false\n            }).limit(limit);\n            if (error) {\n                console.error(\"Error fetching listings for category \".concat(category, \":\"), error);\n                return getListingsByCategorySync(category, limit);\n            }\n            if (!data || data.length === 0) {\n                console.log(\"No data returned from Supabase for category \".concat(category, \", using mock data\"));\n                return getListingsByCategorySync(category, limit);\n            }\n            console.log(\"Successfully fetched \".concat(data.length, \" listings for category \").concat(category));\n            // Map the data to match our DirectoryListing type\n            return data.map((item)=>({\n                    id: item.id || String(item.id),\n                    listing_name: item.listing_name || \"\",\n                    category: item.category || \"\",\n                    region: item.region || \"\",\n                    country: item.country || \"\",\n                    location: item.location || \"\",\n                    description: item.description || \"\",\n                    contact_name: item.contact_name || \"\",\n                    contact_email: item.contact_email || \"\",\n                    contact_phone: item.contact_phone || \"\",\n                    website: item.website || null,\n                    price_info: item.price_info || \"\",\n                    featured: Boolean(item.featured),\n                    image_url: item.image_url || null,\n                    status: item.status || \"approved\",\n                    created_at: item.created_at || new Date().toISOString(),\n                    updated_at: item.updated_at || new Date().toISOString()\n                }));\n        } catch (queryError) {\n            console.error(\"Error executing Supabase query for category \".concat(category, \":\"), queryError);\n            return getListingsByCategorySync(category, limit);\n        }\n    } catch (error) {\n        console.error(\"Error in getListingsByCategory for \".concat(category, \":\"), error);\n        return getListingsByCategorySync(category, limit);\n    }\n}\n// Get listings by region\nasync function getListingsByRegion(region) {\n    let limit = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 12;\n    // Always return mock data to ensure the page renders\n    return getListingsSync({\n        region,\n        limit\n    });\n}\n// Get pending listings\nasync function getPendingListings() {\n    let limit = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 10;\n    // Always return mock data to ensure the page renders\n    return getListingsSync({\n        status: \"pending\",\n        limit\n    });\n}\n// Get listing count\nasync function getListingCount(category) {\n    let status = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"approved\";\n    try {\n        const supabase = (0,_supabase__WEBPACK_IMPORTED_MODULE_0__.getSupabaseServerClient)();\n        if (!supabase) {\n            console.warn(\"Supabase client not available, using mock data for count\");\n            const listings = filterMockListings({\n                category,\n                status,\n                limit: 1000\n            });\n            return listings.length;\n        }\n        let query = supabase.from(\"directory_listings\").select(\"id\", {\n            count: \"exact\"\n        });\n        if (status && status !== \"all\") {\n            query = query.eq(\"status\", status);\n        }\n        if (category) {\n            query = query.eq(\"category\", category);\n        }\n        const { count, error } = await query;\n        if (error) {\n            console.error(\"Error fetching listing count from Supabase:\", error);\n            const listings = filterMockListings({\n                category,\n                status,\n                limit: 1000\n            });\n            return listings.length;\n        }\n        return count || 0;\n    } catch (error) {\n        console.error(\"Error in getListingCount:\", error);\n        const listings = filterMockListings({\n            category,\n            status,\n            limit: 1000\n        });\n        return listings.length;\n    }\n}\n// Function to check if a string is a valid UUID\nfunction isValidUUID(id) {\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\n    return uuidRegex.test(id);\n}\n// Get a single listing by ID\nasync function getListingById(id) {\n    try {\n        // First check mock data for simple numeric IDs\n        const mockListing = mockListings.find((listing)=>listing.id === id) || mockPendingListings.find((listing)=>listing.id === id);\n        if (mockListing) {\n            console.log(\"Found listing with ID \".concat(id, \" in mock data\"));\n            return mockListing;\n        }\n        const supabase = (0,_supabase__WEBPACK_IMPORTED_MODULE_0__.getSupabaseServerClient)();\n        if (!supabase) {\n            console.warn(\"Supabase client not available, using mock data for single listing\");\n            return null;\n        }\n        // Only query Supabase if the ID looks like a valid UUID\n        if (!isValidUUID(id)) {\n            console.warn(\"ID \".concat(id, \" is not a valid UUID, skipping Supabase query\"));\n            return null;\n        }\n        const { data, error } = await supabase.from(\"directory_listings\").select(\"*\").eq(\"id\", id).single();\n        if (error) {\n            console.error(\"Error fetching listing by ID from Supabase:\", error);\n            return null;\n        }\n        return data;\n    } catch (error) {\n        console.error(\"Error in getListingById:\", error);\n        return null;\n    }\n}\n// Get all categories with counts\nasync function getCategories() {\n    const categories = [\n        {\n            name: \"Safari Lodges\",\n            slug: \"lodges\",\n            description: \"Discover the finest safari lodges across Africa, from luxury tented camps to exclusive private reserves.\"\n        },\n        {\n            name: \"Safari Campsites\",\n            slug: \"campsites\",\n            description: \"Experience the authentic African wilderness with our selection of safari campsites, from basic bush camps to comfortable glamping sites.\"\n        },\n        {\n            name: \"4x4 Rentals\",\n            slug: \"4x4-rentals\",\n            description: \"Find the perfect 4x4 vehicle for your self-drive safari adventure, fully equipped with everything you need for off-road exploration.\"\n        },\n        {\n            name: \"Guided Tours\",\n            slug: \"guided-tours\",\n            description: \"Join expert guides on unforgettable safari tours across Africa's most spectacular wildlife destinations.\"\n        },\n        {\n            name: \"Adventure Activities\",\n            slug: \"adventure-activities\",\n            description: \"Add excitement to your safari with thrilling adventure activities, from hot air balloon rides to white water rafting.\"\n        },\n        {\n            name: \"Game Viewing\",\n            slug: \"game-viewing\",\n            description: \"Discover specialized game viewing experiences with expert guides who know exactly where to find Africa's most iconic wildlife.\"\n        },\n        {\n            name: \"Overland Tours\",\n            slug: \"overland-tours\",\n            description: \"Experience the ultimate African adventure with overland tours that take you across multiple countries and diverse landscapes.\"\n        },\n        {\n            name: \"Safari Flights\",\n            slug: \"flights\",\n            description: \"Find scheduled and charter flights to safari destinations across Africa, from bush planes to helicopter transfers.\"\n        },\n        {\n            name: \"Booking Agents\",\n            slug: \"booking-agents\",\n            description: \"Connect with specialized safari booking agents who can arrange your perfect African adventure from start to finish.\"\n        }\n    ];\n    // Try to get counts from Supabase\n    try {\n        const supabase = (0,_supabase__WEBPACK_IMPORTED_MODULE_0__.getSupabaseServerClient)();\n        if (supabase) {\n            const { data, error } = await supabase.from(\"directory_listings\").select(\"category\").eq(\"status\", \"approved\");\n            if (!error && data) {\n                // Count listings by category\n                const categoryCounts = {};\n                data.forEach((listing)=>{\n                    const category = listing.category;\n                    categoryCounts[category] = (categoryCounts[category] || 0) + 1;\n                });\n                // Update categories with counts\n                return categories.map((category)=>({\n                        ...category,\n                        count: categoryCounts[category.slug] || 0\n                    }));\n            }\n        }\n    } catch (error) {\n        console.error(\"Error fetching category counts:\", error);\n    }\n    // Fallback to categories without counts\n    return categories;\n}\n// Get all regions with counts\nasync function getRegions() {\n    const regions = [\n        \"East Africa\",\n        \"Southern Africa\",\n        \"North Africa\",\n        \"West Africa\",\n        \"Multiple Regions\"\n    ];\n    try {\n        const supabase = (0,_supabase__WEBPACK_IMPORTED_MODULE_0__.getSupabaseServerClient)();\n        if (!supabase) {\n            console.warn(\"Supabase client not available, using mock data for regions\");\n            return regions.map((region)=>({\n                    name: region,\n                    count: filterMockListings({\n                        region,\n                        limit: 1000\n                    }).length\n                }));\n        }\n        const { data, error } = await supabase.from(\"directory_listings\").select(\"region\").eq(\"status\", \"approved\");\n        if (error) {\n            console.error(\"Error fetching regions from Supabase:\", error);\n            return regions.map((region)=>({\n                    name: region,\n                    count: filterMockListings({\n                        region,\n                        limit: 1000\n                    }).length\n                }));\n        }\n        // Count listings by region\n        const regionCounts = {};\n        data.forEach((listing)=>{\n            const region = listing.region;\n            regionCounts[region] = (regionCounts[region] || 0) + 1;\n        });\n        return regions.map((region)=>({\n                name: region,\n                count: regionCounts[region] || 0\n            }));\n    } catch (error) {\n        console.error(\"Error in getRegions:\", error);\n        return regions.map((region)=>({\n                name: region,\n                count: filterMockListings({\n                    region,\n                    limit: 1000\n                }).length\n            }));\n    }\n}\n// Update a listing\nasync function updateListing(updatedListing) {\n    try {\n        const supabase = (0,_supabase__WEBPACK_IMPORTED_MODULE_0__.getSupabaseServerClient)();\n        if (!supabase) {\n            console.warn(\"Supabase client not available, using in-memory update\");\n            return updateListingInMemory(updatedListing);\n        }\n        // Only try to update in Supabase if the ID looks like a valid UUID\n        if (!isValidUUID(updatedListing.id)) {\n            console.warn(\"ID \".concat(updatedListing.id, \" is not a valid UUID, using in-memory update\"));\n            return updateListingInMemory(updatedListing);\n        }\n        const { data, error } = await supabase.from(\"directory_listings\").update({\n            listing_name: updatedListing.listing_name,\n            category: updatedListing.category,\n            region: updatedListing.region,\n            country: updatedListing.country,\n            location: updatedListing.location,\n            description: updatedListing.description,\n            contact_name: updatedListing.contact_name,\n            contact_email: updatedListing.contact_email,\n            contact_phone: updatedListing.contact_phone,\n            website: updatedListing.website,\n            price_info: updatedListing.price_info,\n            featured: updatedListing.featured,\n            image_url: updatedListing.image_url,\n            status: updatedListing.status,\n            updated_at: new Date().toISOString()\n        }).eq(\"id\", updatedListing.id).select().single();\n        if (error) {\n            console.error(\"Error updating listing in Supabase:\", error);\n            return updateListingInMemory(updatedListing);\n        }\n        return data;\n    } catch (error) {\n        console.error(\"Error in updateListing:\", error);\n        return updateListingInMemory(updatedListing);\n    }\n}\n// Update a listing in memory - used as fallback\nfunction updateListingInMemory(updatedListing) {\n    // Find the listing in the appropriate array based on status\n    const oldListing = mockListings.find((listing)=>listing.id === updatedListing.id) || mockPendingListings.find((listing)=>listing.id === updatedListing.id);\n    if (!oldListing) {\n        throw new Error(\"Listing with ID \".concat(updatedListing.id, \" not found\"));\n    }\n    // Remove from old status array if status changed\n    if (oldListing.status !== updatedListing.status) {\n        if (oldListing.status === \"approved\") {\n            const index = mockListings.findIndex((listing)=>listing.id === updatedListing.id);\n            if (index !== -1) {\n                mockListings.splice(index, 1);\n            }\n        } else if (oldListing.status === \"pending\") {\n            const index = mockPendingListings.findIndex((listing)=>listing.id === updatedListing.id);\n            if (index !== -1) {\n                mockPendingListings.splice(index, 1);\n            }\n        }\n        // Add to new status array\n        if (updatedListing.status === \"approved\") {\n            mockListings.push(updatedListing);\n        } else if (updatedListing.status === \"pending\") {\n            mockPendingListings.push(updatedListing);\n        }\n    } else {\n        // Update in the same array\n        if (updatedListing.status === \"approved\") {\n            const index = mockListings.findIndex((listing)=>listing.id === updatedListing.id);\n            if (index !== -1) {\n                mockListings[index] = updatedListing;\n            }\n        } else if (updatedListing.status === \"pending\") {\n            const index = mockPendingListings.findIndex((listing)=>listing.id === updatedListing.id);\n            if (index !== -1) {\n                mockPendingListings[index] = updatedListing;\n            }\n        }\n    }\n    return updatedListing;\n}\n// Get featured listings - synchronous version for client components\nfunction getFeaturedListingsSync() {\n    let limit = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 6;\n    return getListingsSync({\n        featured: true,\n        limit\n    });\n}\n// Get listings by category - synchronous version for client components\nfunction getListingsByCategorySync(category) {\n    let limit = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 50;\n    return getListingsSync({\n        category,\n        limit\n    });\n}\n// Get categories - synchronous version for client components\nfunction getCategoriesSync() {\n    return [\n        {\n            name: \"Safari Lodges\",\n            slug: \"lodges\",\n            description: \"Discover the finest safari lodges across Africa, from luxury tented camps to exclusive private reserves.\"\n        },\n        {\n            name: \"Safari Campsites\",\n            slug: \"campsites\",\n            description: \"Experience the authentic African wilderness with our selection of safari campsites, from basic bush camps to comfortable glamping sites.\"\n        },\n        {\n            name: \"4x4 Rentals\",\n            slug: \"4x4-rentals\",\n            description: \"Find the perfect 4x4 vehicle for your self-drive safari adventure, fully equipped with everything you need for off-road exploration.\"\n        },\n        {\n            name: \"Guided Tours\",\n            slug: \"guided-tours\",\n            description: \"Join expert guides on unforgettable safari tours across Africa's most spectacular wildlife destinations.\"\n        },\n        {\n            name: \"Adventure Activities\",\n            slug: \"adventure-activities\",\n            description: \"Add excitement to your safari with thrilling adventure activities, from hot air balloon rides to white water rafting.\"\n        },\n        {\n            name: \"Game Viewing\",\n            slug: \"game-viewing\",\n            description: \"Discover specialized game viewing experiences with expert guides who know exactly where to find Africa's most iconic wildlife.\"\n        },\n        {\n            name: \"Overland Tours\",\n            slug: \"overland-tours\",\n            description: \"Experience the ultimate African adventure with overland tours that take you across multiple countries and diverse landscapes.\"\n        },\n        {\n            name: \"Safari Flights\",\n            slug: \"flights\",\n            description: \"Find scheduled and charter flights to safari destinations across Africa, from bush planes to helicopter transfers.\"\n        },\n        {\n            name: \"Booking Agents\",\n            slug: \"booking-agents\",\n            description: \"Connect with specialized safari booking agents who can arrange your perfect African adventure from start to finish.\"\n        }\n    ];\n}\n// Get listing by ID - synchronous version for client components\nfunction getListingByIdSync(id) {\n    // Check in approved listings\n    const approvedListing = mockListings.find((listing)=>listing.id === id);\n    if (approvedListing) return approvedListing;\n    // Check in pending listings\n    const pendingListing = mockPendingListings.find((listing)=>listing.id === id);\n    if (pendingListing) return pendingListing;\n    return null;\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/listings.ts\n"));

/***/ })

});